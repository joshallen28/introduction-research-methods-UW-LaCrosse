pivot_wider(names_from = survey_year, values_from = pct_urban) %>%
mutate(delta = `2014`-`2015`)
city = order_plot_data %>%
filter(delta < 0) %>%
pull(bird_type)
camp = order_plot_data %>%
filter(delta > 0) %>%
pull(bird_type)
allow_list_bird_moving_to_city <-
plot_data %>%
filter(bird_type %in% city) %>%
mutate(n = Rural + Urban) %>%
group_by(bird_type) %>%
summarise(total_n = sum(n)) %>%
slice_max(total_n, n = 10, with_ties = FALSE) %>% # just taking the top 5 birds
pull(bird_type) %>% unique()
allow_list_bird_moving_to_camp <-
plot_data %>%
filter(bird_type %in% camp) %>%
mutate(n = Rural + Urban) %>%
group_by(bird_type) %>%
summarise(total_n = sum(n)) %>%
slice_max(total_n, n = 10, with_ties = FALSE) %>%
pull(bird_type) %>% unique()
my_order = order_plot_data %>%
filter(
bird_type %in% c(allow_list_bird_moving_to_city, allow_list_bird_moving_to_camp)) %>%
arrange(delta) %>%
pull(bird_type) %>%
unique()
birds_clean = plot_data %>%
filter(bird_type %in% c(allow_list_bird_moving_to_city, allow_list_bird_moving_to_camp)) %>%
mutate(survey_year = as.character(survey_year)) %>%
mutate(moving = if_else(bird_type %in% allow_list_bird_moving_to_city, 'Moving to city bird baths', 'Moving to camp bird baths')) %>%
mutate(moving = toupper(moving))
ggplot(birds_clean, aes(x = factor(bird_type, levels = c(my_order)), y = pct_urban)) +
geom_point(size = 4, aes(color = survey_year), alpha = .3) +
geom_line(aes(group = bird_type), color = 'black', size = .5,
arrow = arrow(length=unit(0.10,"cm"), ends="last", type = "closed")) +
geom_hline(yintercept = 0.5, color = 'grey60') +
geom_hline(yintercept = 0.5, color = 'grey60') +
coord_flip() +
labs(x = NULL, y = "Percent Birds Moving", color = NULL) +
facet_wrap(vars(moving), scales = 'free_y') +
scale_y_continuous(limits = c(0,1), labels = scales::percent) +
scale_color_manual(values = c("#feca00", "#d36328")) +
theme_allen()
install.packages(c("astsa", "bayestestR", "blogdown", "bookdown", "bslib", "datawizard", "DT", "future", "htmltools", "insight", "lava", "matrixStats", "openssl", "pROC", "rdrobust", "stringi", "survival", "waldo"))
install.packages(c("astsa", "bayestestR", "blogdown", "bookdown", "bslib", "datawizard", "DT", "future", "htmltools", "insight", "lava", "matrixStats", "openssl", "pROC", "rdrobust", "stringi", "survival", "waldo"))
install.packages(c("astsa", "bayestestR", "blogdown", "bookdown", "bslib", "datawizard", "DT", "future", "htmltools", "insight", "lava", "matrixStats", "openssl", "pROC", "rdrobust", "stringi", "survival", "waldo"))
install.packages(c("astsa", "bayestestR", "blogdown", "bookdown", "bslib", "datawizard", "DT", "future", "htmltools", "insight", "lava", "matrixStats", "openssl", "pROC", "rdrobust", "stringi", "survival", "waldo"))
install.packages(c("astsa", "bayestestR", "blogdown", "bookdown", "bslib", "datawizard", "DT", "future", "htmltools", "insight", "lava", "matrixStats", "openssl", "pROC", "rdrobust", "stringi", "survival", "waldo"))
pacman::p_load("tidyverse", "scales", "modelsummary", "kableExtra", "Manu",
"highr")
knitr::opts_chunk$set(echo = TRUE, include = TRUE, warning = FALSE,
message = FALSE, cache = TRUE)
knitr::include_graphics("penguins-manu-example.png")
penguins = read_csv("penguins.csv")
color1 =  get_pal("Kaka")
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g , color = species,
shape = species)) +
geom_point(position = position_jitter(width = 0, height = 0.25, seed = 1234)) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Flipper Length(mm)", y = "Body Mass(g)", fill = "Species of Penguins") +
theme_bw() +
scale_color_manual(values = color1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10))
penguins = read_csv("penguins.csv")
color1 =  get_pal("Hoiho")
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g , color = species,
shape = species)) +
geom_point(position = position_jitter(width = 0, height = 0.25, seed = 1234)) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Flipper Length(mm)", y = "Body Mass(g)", fill = "Species of Penguins") +
theme_bw() +
scale_color_manual(values = color1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10))
data("starwars")
head(starwars)
filter(starwars, species = "Droid")
View(starwars)
naboo2 = filter(starwars, homeworld == "Naboo" & species == "Human")
View(naboo2)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g,
color = "blue")) +
geom_point() +
labs(x = "Flipper Length(mm)", y = "Body Mass(g)")
color1 = get_pal("Kaka")
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g , color = species,
shape = species)) +
geom_point(position = position_jitter(width = 0, height = 0.25, seed = 1234)) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Flipper Length(mm)", y = "Body Mass(g)", fill = "Species of Penguins") +
scale_color_manual(values = color1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
theme_allen()
knitr::opts_chunk$set(echo = TRUE, include = TRUE, warning = FALSE,
message = FALSE, cache = TRUE)
pacman::p_load("tidyverse", "scales", "modelsummary", "kableExtra", "Manu",
"highr")
knitr::include_graphics("penguins-manu-example.png")
penguins = read_csv("penguins.csv")
color1 =  get_pal("Hoiho")
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g , color = species,
shape = species)) +
geom_point(position = position_jitter(width = 0, height = 0.25, seed = 1234)) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Flipper Length(mm)", y = "Body Mass(g)", fill = "Species of Penguins") +
theme_bw() +
scale_color_manual(values = color1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10))
data(mpg)
ggplot(aes(x = displ, y = cty)) +
geom_point()
ggplot(data = mpg, aes(x = displ, y = cty)) +
geom_point()
a = c(1, 3, 5, 6, 8)
print(a)
b = c(1, 3, 5, 6, 8)
print(b)
c(1, 3, 5, 6, 8) -> d
print(d)
x = c(1, 3, 5, 6, 8)
print(x)
class(x)
z = c("a", "b", "c", "d", "e")
print(z)
class(z)
list1 = list(1,2,3)
list2 = list("Sun","Mon","Tue")
list3 = c(list1,list2)
print(list3)
y = cbind(a,z)
print(y)
data("starwars")
head(starwars)
filter(starwars, species = "Droid")
filter(mpg, manufacturer == "audi")
filter(starwars, homeworld == "Naboo")
filter(starwars, homeworld != "Naboo")
naboo = filter(starwars, homeworld == "Naboo")
naboo2 = filter(starwars, homeworld == "Naboo" & species == "Human")
naboo = filter(starwars, homeworld == "naboo")
naboo = filter(starwars, homeworld == "Naboo",)
starwars_human = starwars %>%
mutate(human = ifelse(species == "Human", TRUE, FALSE)) %>%
select(human, name)
head(starwars_human)
starwars %>%
filter(!is.na(birth_year)) %>%
select(name, birth_year) %>%
mutate(dog_years = birth_year * 7) %>%
mutate(comment = paste0(name, " is ", dog_years, " in dog years."))
starwars %>%
filter(!is.na(birth_year)) %>%
select(name, birth_year) %>%
mutate(dog_years = birth_year * 7,
comment = paste0(name, " is ", dog_years, " in dog years."))
pacman::p_load("tidytuesdayR", "showtext")
font_add_google("Roboto", "condensed")
bird_raw = tidytuesdayR::tt_load(2021, week = 36)
bird_baths = bird_raw$bird_baths
bird_raw = tidytuesdayR::tt_load(2021, week = 36)
bird_baths = bird_raw$bird_baths
theme_allen = function(){
theme_minimal(base_family = "Roboto Condensed",
base_size = 14)  +
theme(axis.ticks = element_line(colour='black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linetype = "dotted",
color = "#BBBBBB"),
legend.background = element_rect(color = "white"),
legend.title = element_text(face = "bold"),
legend.position = "bottom",
axis.title.x = element_text(margin = margin(t = 10), hjust = 0),
axis.title.y = element_text(margin = margin(r = 10), hjust = 1),
strip.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(color = "grey90", fill = NA))
}
plot_data =
bird_baths %>%
filter(complete.cases(.)) %>% ## Return a logical vector indicating which cases are complete, i.e., have no missing values.
group_by(bird_type, urban_rural, survey_year) %>%
summarise(n = sum(bird_count)) %>%
pivot_wider(names_from = urban_rural, values_from = n) %>% # changes data from long to wide
mutate(pct_urban = Urban/(Rural+Urban)) %>%
filter(Urban > 0 & Rural > 0) %>%
group_by(bird_type) %>%
filter(n() == 2) %>%
ungroup()
order_plot_data = plot_data %>%
mutate(survey_year = as.character(survey_year)) %>%
select(-Rural, -Urban) %>%
pivot_wider(names_from = survey_year, values_from = pct_urban) %>%
mutate(delta = `2014`-`2015`)
city = order_plot_data %>%
filter(delta < 0) %>%
pull(bird_type)
camp = order_plot_data %>%
filter(delta > 0) %>%
pull(bird_type)
allow_list_bird_moving_to_city =
plot_data %>%
filter(bird_type %in% city) %>%
mutate(n = Rural + Urban) %>%
group_by(bird_type) %>%
summarise(total_n = sum(n)) %>%
slice_max(total_n, n = 10, with_ties = FALSE) %>% # just taking the top 5 birds
pull(bird_type) %>% unique()
allow_list_bird_moving_to_camp =
plot_data %>%
filter(bird_type %in% camp) %>%
mutate(n = Rural + Urban) %>%
group_by(bird_type) %>%
summarise(total_n = sum(n)) %>%
slice_max(total_n, n = 10, with_ties = FALSE) %>%
pull(bird_type) %>% unique()
my_order = order_plot_data %>%
filter(
bird_type %in% c(allow_list_bird_moving_to_city, allow_list_bird_moving_to_camp)) %>%
arrange(delta) %>%
pull(bird_type) %>%
unique()
birds_clean = plot_data %>%
filter(bird_type %in% c(allow_list_bird_moving_to_city, allow_list_bird_moving_to_camp)) %>%
mutate(survey_year = as.character(survey_year)) %>%
mutate(moving = if_else(bird_type %in% allow_list_bird_moving_to_city, 'Moving to city bird baths', 'Moving to camp bird baths')) %>%
mutate(moving = toupper(moving))
ggplot(birds_clean, aes(x = factor(bird_type, levels = c(my_order)), y = pct_urban)) +
geom_point(size = 4, aes(color = survey_year), alpha = .3) +
geom_line(aes(group = bird_type), color = 'black', size = .5,
arrow = arrow(length=unit(0.10,"cm"), ends="last", type = "closed")) +
geom_hline(yintercept = 0.5, color = 'grey60') +
geom_hline(yintercept = 0.5, color = 'grey60') +
coord_flip() +
labs(x = NULL, y = "Percent Birds Moving", color = NULL) +
facet_wrap(vars(moving), scales = 'free_y') +
scale_y_continuous(limits = c(0,1), labels = scales::percent) +
scale_color_manual(values = c("#feca00", "#d36328")) +
theme_allen()
extreme = starwars_human %>%
select(human, name)
head(extreme)
pacman::p_load("nycflights13")
data(flights)
delays = flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
ggplot(data = delays, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
delay = flights %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
)
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
pacman::p_load("patchwork", "ggthemes")
penguins = read_csv("penguins.csv")
ggplot(data = penguins) +
geom_point(aes(x = flipper_length_mm, y = body_mass_g))
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point() +
labs(x = "Flipper Length(mm)", y = "Body Mass(g)")
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g,
color = "blue")) +
geom_point() +
labs(x = "Flipper Length(mm)", y = "Body Mass(g)")
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(color = "blue", shape = 2) +
labs(x = "Flipper Length(mm)", y = "Body Mass(g)")
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(data = filter(penguins, sex == "female")) +
labs(x = "Flipper Length(mm)", y = "Body Mass(g)")
penguins %>%
filter(sex == "female") %>%
ggplot(aes (x = flipper_length_mm, y = body_mass_g)) +
geom_point() +
labs(x = "Flipper Length(mm)", y = "Body Mass(g)")
library(scales)
fem_plot =  penguins %>%
filter(sex == "female") %>%
ggplot(aes (x = flipper_length_mm, y = body_mass_g)) +
geom_point() +
labs(x = "Flipper Length(mm)", y = "Body Mass(g)", title = "Female") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
fem_plot
male_plot =  penguins %>%
filter(sex == "male") %>%
ggplot(aes (x = flipper_length_mm, y = body_mass_g)) +
geom_point() +
labs(x = "Flipper Length(mm)", y = "Body Mass(g)", title = "Male") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
fem_plot/male_plot
color1 = get_pal("Kaka")
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g , color = species,
shape = species)) +
geom_point(position = position_jitter(width = 0, height = 0.25, seed = 1234)) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Flipper Length(mm)", y = "Body Mass(g)", fill = "Species of Penguins") +
scale_color_manual(values = color1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
theme_allen()
theme_allen = function(){
theme_minimal(base_family = "Roboto Condensed",
base_size = 14)  +
theme(axis.ticks = element_line(colour='black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linetype = "dotted",
color = "#BBBBBB"),
legend.background = element_rect(color = "white"),
legend.title = element_text(face = "bold"),
axis.title.x = element_text(margin = margin(t = 10), hjust = 0),
axis.title.y = element_text(margin = margin(r = 10), hjust = 1),
strip.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(color = "grey90", fill = NA))
}
theme_set(
theme_allen()
)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(data = filter(penguins, sex == "female")) +
labs(x = "Flipper Length(mm)", y = "Body Mass(g)")
pacman::p_load("osmdata", "ggmap", "tidygeocoder", "sf")
big_streets = getbb("Atlanta United States") %>%
opq() %>%
add_osm_feature(key = "highway",
value = c("motorway", "primary", "motorway_link", "primary_link")) %>%
osmdata_sf()
med_streets = getbb("Atlanta United States")%>%
opq()%>%
add_osm_feature(key = "highway",
value = c("secondary", "tertiary", "secondary_link", "tertiary_link")) %>%
osmdata_sf()
small_streets = getbb("Atlanta United States")%>%
opq()%>%
add_osm_feature(key = "highway",
value = c("residential", "living_street",
"unclassified",
"service", "footway"
)) %>%
osmdata_sf()
railway = getbb("Atlanta United States")%>%
opq()%>%
add_osm_feature(key = "railway", value= "rail") %>%
osmdata_sf()
bars = tribble(
~name, ~address,
"Hattie B's", "299 Moreland Ave NE, Atlanta, GA 30307",
"Side Bar", "79 Poplar St NW, Atlanta, GA 30303",
"Manny's", "602 North Highland Avenue Northeast, Atlanta, GA 30307",
"The Porter", "1156 Euclid Ave NE, Atlanta, GA 30307",
"Anatolia's", "Peachtree St, Atlanta, GA 30303",
"Agave", "242 Boulevard SE, Atlanta, GA 30312",
"Fetch", "520 Daniel St SE, Atlanta, GA 30312",
"Recess", "99-V, Krog St NE, Atlanta, GA 30307",
"Der Biergarten", "300 Marietta St NW, Atlanta, GA 30313"
)
bars_geocode = bars %>%
geocode(address, method = "osm")
add_geom = bars_geocode %>%
st_as_sf(coords = c("long", "lat"), crs = st_crs("EPSG:4326"))
ggplot() +
geom_sf(data = railway$osm_lines,
inherit.aes = FALSE,
color = "black",
size = .2,
linetype="dotdash",
alpha = .5) +
geom_sf(data = med_streets$osm_lines,
inherit.aes = FALSE,
color = "black",
size = .3,
alpha = .5) +
geom_sf(data = small_streets$osm_lines,
inherit.aes = FALSE,
color = "#666666",
size = .2,
alpha = .3) +
geom_sf(data = big_streets$osm_lines,
inherit.aes = FALSE,
color = "black",
size = .5,
alpha = .6) +
geom_sf(data = add_geom, aes(color = name),
color = "#0039A6") +
coord_sf(ylim = c(33.64, 33.89),
xlim = c (-84.56, -84.30), expand = FALSE) +
labs(title = "Atlanta", subtitle = "Restaurants and Bars Pols Students \n have had gone to for events", caption = "Dots are in GSU Blue") +
theme_void(base_family = "Roboto Condensed", base_size = 20) +
theme(plot.subtitle = element_text(size = 10, hjust = 0.5,
margin = margin(2, 0, 5, 0)),
plot.title = element_text(face="bold", hjust=.5),
plot.caption = element_text(size = 8))
pacman::p_load("kableExtra", "truncnorm", "broom")
n_people = 2500
grade_data = tibble(id = 1:n_people,
gpa =  rtruncnorm(n_people, mean = 3.5, sd = 1.0,
a = 1.5, b = 4.0)) %>%
mutate( gpa = round(gpa,2),
gre_base = rbeta(n_people, shape1 = 3, shape2 = 16),
gre_effect = 10.1*gpa ,
gre = gre_base + gre_effect + rnorm(n_people, mean = 150, sd = 3.5
),
gre =  round(gre,0),
math_score = (gre*-10.0) + (gpa*-2.0) + rnorm(n_people, mean = 0,
sd = 3),
math_probability = rescale(math_score, to = c(0.05,0.95)),
math_camp_num = rbinom(n_people, 1, math_probability),
math_camp = ifelse(math_camp_num == 1,TRUE,FALSE)) %>%
mutate(grade_base = rbeta(n_people, shape1 = 4, shape2 = 5 ) *100,
grade_effect = (15*gpa) + (2 * gre) + (10 * math_camp),
final_grade = grade_base + grade_effect + rnorm(n_people, 0, sd = 2),
final_grade = rescale(final_grade, to = c(0,100)),
final_grade = round(final_grade,1))
# For lm we need to feed it the data argument
naive_model = lm(final_grade ~ math_camp, data = grade_data)
tidy(naive_model)
adjusted_mod = lm(final_grade ~ math_camp + gre + gpa, data = grade_data)
tidy(adjusted_mod)
prop_model = glm(math_camp ~ gre + gpa, family = binomial(link = "logit"),
data = grade_data)
camp_probabilities = augment_columns(prop_model,
grade_data,
type.predict = "response") %>%
rename(propensity = .fitted)
camp_weights = camp_probabilities %>%
### To ensure that R doesn't do something weird with precedence lets wrap that
### in parenthesis
mutate(ipw = (math_camp/propensity) + (1 - math_camp)/(1-propensity))
ipw_model = lm(final_grade ~ math_camp, weights = ipw, data = camp_weights)
tidy(ipw_model)
modelsummary(list("Naive" = naive_model, "Confounders" = adjusted_mod,
"IPW" = ipw_model),
stars = TRUE ,
output = "kableExtra",
gof_omit = "IC|Log|F|Adj",
coef_map = c("math_campTRUE" = "Math Camp", "gre" = "GRE",
"gpa" = "GPA", "(Intercept)" = "Constant"),
title = "Effect of Math Camp on Final Grade \\label{tab:table1}") %>%
kable_styling(latex_options = "HOLD_position")
datasummary(gpa ~ Mean, data = grade_data)
datasummary(gpa + gre ~ Mean + SD,
data = grade_data)
pacman::p_load("tidyverse", "scales", "modelsummary", "kableExtra", "Manu",
"highr")
theme_allen = function(){
theme_minimal(base_family = "Roboto Condensed",
base_size = 14)  +
theme(axis.ticks = element_line(colour='black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linetype = "dotted",
color = "#BBBBBB"),
legend.background = element_rect(color = "white"),
legend.title = element_text(face = "bold"),
legend.position = "bottom",
axis.title.x = element_text(margin = margin(t = 10), hjust = 0),
axis.title.y = element_text(margin = margin(r = 10), hjust = 1),
strip.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(color = "grey90", fill = NA))
}
x = c(1, 3, 5, 6, 8)
print(x)
typeof(x)
z = c("a", "b", "c", "d", "e")
print(z)
typeof(z)
x = c(1, 3, 5, 6, 8)
x
class(x)
z = c("a", "b", "c", "d", "e")
z
class(z)
x2 = x*2
x2
x*2
summary(x)
install.packages(c("caret", "cpp11", "data.table", "datawizard", "desc", "diffobj", "digest", "fda", "fixest", "gert", "hms", "knitr", "lattice", "libcoin", "lifecycle", "maps", "matrixStats", "mgcv", "mime", "modelsummary", "party", "performance", "pillar", "plm", "progressr", "rcmdcheck", "RcppArmadillo", "RCurl", "readr", "recipes", "remotes", "rgdal", "s2", "shiny", "stringi", "taylor", "testthat", "TH.data", "tibble", "tidycensus", "tidymodels", "tidyr", "tidytext", "tigris", "tinytex", "TMB", "vars", "XML"))
install.packages(c("caret", "cpp11", "data.table", "datawizard", "desc", "diffobj", "digest", "fda", "fixest", "gert", "hms", "knitr", "lattice", "libcoin", "lifecycle", "maps", "matrixStats", "mgcv", "mime", "modelsummary", "party", "performance", "pillar", "plm", "progressr", "rcmdcheck", "RcppArmadillo", "RCurl", "readr", "recipes", "remotes", "rgdal", "s2", "shiny", "stringi", "taylor", "testthat", "TH.data", "tibble", "tidycensus", "tidymodels", "tidyr", "tidytext", "tigris", "tinytex", "TMB", "vars", "XML"))
install.packages(c("caret", "cpp11", "data.table", "datawizard", "desc", "diffobj", "digest", "fda", "fixest", "gert", "hms", "knitr", "lattice", "libcoin", "lifecycle", "maps", "matrixStats", "mgcv", "mime", "modelsummary", "party", "performance", "pillar", "plm", "progressr", "rcmdcheck", "RcppArmadillo", "RCurl", "readr", "recipes", "remotes", "rgdal", "s2", "shiny", "stringi", "taylor", "testthat", "TH.data", "tibble", "tidycensus", "tidymodels", "tidyr", "tidytext", "tigris", "tinytex", "TMB", "vars", "XML"))
missing_packages <- c(
"appendix", "babel-english", "babel-greek", "babel-latin",
"biber", "biblatex", "caption", "cbfonts-fd", "colortbl", "csquotes",
"enumitem", "environ", "eso-pic", "fancyhdr", "greek-fontenc",
"grfext", "hyphen-greek", "hyphen-latin", "lineno", "logreq",
"makecell", "microtype", "minitoc", "multirow", "notoccite",
"oberdiek", "pdflscape", "pdfpages", "quotchap", "soul", "tabu",
"threeparttable", "threeparttablex", "titlesec", "tocbibind",
"trimspaces", "ulem", "units", "utopia", "varwidth", "wrapfig",
"fvextra"
)
tinytex::tlmgr_install(missing_packages)
tlmgr update --self
q()
